"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∑ Telegram –∫–∞–Ω–∞–ª—ñ–≤
"""
import re
import asyncio
import logging
from typing import Dict, Any, List, Optional
from services.telegram_service import get_telegram_service
from app.config import GIFT_MAPPING

logger = logging.getLogger(__name__)


class GiftParser:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∑ –∫–∞–Ω–∞–ª—ñ–≤"""
    
    def __init__(self):
        self.telegram_service = get_telegram_service()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
        self.gift_patterns = {
            "HEELS": [r"heels", r"high heels", r"üë†", r"–∫–∞–±–ª—É–∫", r"—Ç—É—Ñ–ª"],
            "BUTTON": [r"button", r"üîò", r"–∫–Ω–æ–ø–∫", r"button"],
            "CATS": [r"cats", r"cat", r"üê±", r"–∫–æ—Ç", r"–∫—ñ—Ç", r"–∫–æ—Ç–∏–∫"],
            "SOCKS": [r"socks", r"üß¶", r"—à–∫–∞—Ä–ø–µ—Ç–∫", r"–Ω–æ—Å–∫"],
            "BICEPS": [r"biceps", r"muscle", r"üí™", r"–±—ñ—Ü–µ–ø—Å", r"–º'—è–∑–∏"],
            "LAMP": [r"lamp", r"üí°", r"–ª–∞–º–ø–∞", r"—Å–≤—ñ—Ç–ª–æ"],
            "BOUQUET": [r"bouquet", r"flowers", r"üíê", r"–±—É–∫–µ—Ç", r"–∫–≤—ñ—Ç–∏"],
            "CUPCAKE": [r"cupcake", r"cake", r"üßÅ", r"–∫–µ–∫—Å", r"—Ç–æ—Ä—Ç"],
            "MARCH 8": [r"march", r"8 march", r"üå∏", r"8 –±–µ—Ä–µ–∑", r"–∂—ñ–Ω–æ—á"],
            "DYSON": [r"dyson", r"vacuum", r"üå™Ô∏è", r"–¥–∞–π—Å–æ–Ω", r"–ø–∏–ª–æ—Å–æ—Å"],
            "BOILER": [r"boiler", r"üî•", r"–∫–æ—Ç–µ–ª", r"–±–æ–π–ª–µ—Ä"],
            "CLOVER": [r"clover", r"üçÄ", r"–∫–æ–Ω—é—à–∏–Ω–∞", r"–∫–ª–µ–≤–µ—Ä"],
            "AMULET": [r"amulet", r"üßø", r"–∞–º—É–ª–µ—Ç", r"–æ–±–µ—Ä—ñ–≥"],
            "MOSQUE": [r"mosque", r"üïå", r"–º–µ—á–µ—Ç—å", r"–º–æ—Å—ä–∫"],
            "DOSHIK": [r"doshik", r"noodles", r"üçú", r"–¥–æ—à–∏–∫", r"–ª–∞–ø—à–∞"],
            "POOP": [r"poop", r"üí©", r"–∫–∞–∫–∞—à–∫", r"–≥–æ–≤–Ω–æ"],
            "MONKEY": [r"monkey", r"üêµ", r"–º–∞–≤–ø", r"–æ–±–µ–∑—å—è–Ω"],
            "BRICK": [r"brick", r"üß±", r"—Ü–µ–≥–ª", r"–∫–∏—Ä–ø–∏—á"],
            "ROCKET": [r"rocket", r"üöÄ", r"—Ä–∞–∫–µ—Ç", r"–∫–æ—Ä–∞–±–ª"],
            "KULICH": [r"kulich", r"easter", r"üçû", r"–∫—É–ª–∏—á", r"–ø–∞—Å–∫"],
            "RABBIT": [r"rabbit", r"bunny", r"üê∞", r"–∫—Ä–æ–ª–∏–∫", r"–∑–∞—è—Ü"],
            "1 MAY": [r"1 may", r"may day", r"üåπ", r"1 —Ç—Ä–∞–≤–Ω", r"–º–∞–π"],
            "MEDAL": [r"medal", r"üèÖ", r"–º–µ–¥–∞–ª—å", r"–Ω–∞–≥–æ—Ä–æ–¥"],
            "PIGEON": [r"pigeon", r"üïäÔ∏è", r"–≥–æ–ª—É–±", r"–ø—Ç–∏—Ü"],
            "STAR": [r"star", r"‚≠ê", r"–∑—ñ—Ä–∫", r"–∑–≤–µ–∑–¥"],
            "CREAMY ICE CREAM": [r"ice cream", r"üç¶", r"–º–æ—Ä–æ–∑–∏–≤", r"–º–æ—Ä–æ–∂–µ–Ω–æ–µ"],
            "ESKIMO": [r"eskimo", r"üßä", r"–µ—Å–∫—ñ–º–æ", r"—ç—Å–∫–∏–º–æ—Å"],
            "PLUMBER": [r"plumber", r"mario", r"üîß", r"—Å–∞–Ω—Ç–µ—Ö–Ω—ñ–∫", r"–≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥"],
            "NIPPLE": [r"nipple", r"üçº", r"—Å–æ—Å–∫–∞", r"–ø—É—Å—Ç–∏—à–∫"],
            "EAGLE": [r"eagle", r"ü¶Ö", r"–æ—Ä–µ–ª", r"–ø—Ç–∞—Ö"],
            "STATUE": [r"statue", r"üóø", r"—Å—Ç–∞—Ç—É—è", r"–ø–∞–º'—è—Ç–Ω–∏–∫"],
            "TORCH": [r"torch", r"üî¶", r"—Ñ–∞–∫–µ–ª", r"–ª—ñ—Ö—Ç–∞—Ä"],
            "WESTSIDE SIGN": [r"westside", r"west", r"ü§ü", r"–∑–∞—Ö—ñ–¥", r"–∑–Ω–∞–∫"],
            "LOW RIDER": [r"low rider", r"car", r"üöó", r"–º–∞—à–∏–Ω", r"–∞–≤—Ç–æ–º–æ–±—ñ–ª—å"],
            "SNOOP CIGAR": [r"cigar", r"üö¨", r"—Å–∏–≥–∞—Ä", r"–∫—É—Ä—ñ–Ω"],
            "SWAG BAG": [r"swag", r"bag", r"üéí", r"—Å—É–º–∫", r"—Ä—é–∫–∑–∞–∫"],
            "SNOOP DOGG": [r"snoop", r"dogg", r"üé§", r"—Å–Ω—É–ø", r"—Ä–µ–ø–µ—Ä"]
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        self.count_patterns = [
            r"(\d+)\s*(?:—à—Ç|—à—Ç—É–∫|pieces|pcs|x|√ó)",
            r"count[:\s]*(\d+)",
            r"–∫—ñ–ª—å–∫—ñ—Å—Ç—å[:\s]*(\d+)",
            r"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ[:\s]*(\d+)",
            r"total[:\s]*(\d+)",
            r"–≤—Å—å–æ–≥–æ[:\s]*(\d+)",
            r"(\d+)\s*(?:–ø–æ–¥–∞—Ä—É–Ω–∫|–ø–æ–¥–∞—Ä–æ–∫|gift)"
        ]
    
    async def parse_channel_gifts(self, channel_id: int) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∑ –∫–∞–Ω–∞–ª—É
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
            messages = await self.telegram_service.get_channel_messages(channel_id)
            
            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ–º–∞—î, –≥–µ–Ω–µ—Ä—É—î–º–æ –¥–µ–º–æ-–¥–∞–Ω—ñ
            if not messages:
                return self._generate_demo_gifts(channel_id)
            
            # –ü–∞—Ä—Å–∏–º–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            gifts = {}
            
            for message in messages:
                parsed_gifts = self._parse_message_for_gifts(message)
                
                for gift_name, count in parsed_gifts.items():
                    if gift_name in gifts:
                        gifts[gift_name] += count
                    else:
                        gifts[gift_name] = count
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
            result = []
            for gift_name, count in gifts.items():
                gift_id = self._get_gift_id_by_name(gift_name)
                if gift_id:
                    result.append({
                        "id": gift_id,
                        "name": gift_name,
                        "count": count,
                        "image_url": self._get_gift_image_url(gift_id)
                    })
            
            return result if result else self._generate_demo_gifts(channel_id)
            
        except Exception as e:
            logger.error(f"Failed to parse gifts from channel {channel_id}: {e}")
            return self._generate_demo_gifts(channel_id)
    
    def _parse_message_for_gifts(self, message: Dict[str, Any]) -> Dict[str, int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
        """
        gifts = {}
        text = message.get("text", "").lower()
        
        if not text:
            return gifts
        
        # –®—É–∫–∞—î–º–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        for gift_name, patterns in self.gift_patterns.items():
            for pattern in patterns:
                if re.search(pattern, text, re.IGNORECASE):
                    # –ó–Ω–∞–π—à–ª–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫, —Ç–µ–ø–µ—Ä —à—É–∫–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                    count = self._extract_count_from_text(text, pattern)
                    if count > 0:
                        gifts[gift_name] = gifts.get(gift_name, 0) + count
                    break
        
        return gifts
    
    def _extract_count_from_text(self, text: str, gift_pattern: str) -> int:
        """
        –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑ —Ç–µ–∫—Å—Ç—É
        """
        # –®—É–∫–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–±–ª–∏–∑—É –∑–≥–∞–¥–∫–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–∞
        gift_match = re.search(gift_pattern, text, re.IGNORECASE)
        if not gift_match:
            return 1  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1 —à—Ç—É–∫–∞
        
        # –ë–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç –Ω–∞–≤–∫–æ–ª–æ –∑–≥–∞–¥–∫–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–∞
        start = max(0, gift_match.start() - 50)
        end = min(len(text), gift_match.end() + 50)
        context = text[start:end]
        
        # –®—É–∫–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        for pattern in self.count_patterns:
            match = re.search(pattern, context, re.IGNORECASE)
            if match:
                try:
                    count = int(match.group(1))
                    return count if count > 0 else 1
                except (ValueError, IndexError):
                    continue
        
        return 1  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    def _get_gift_id_by_name(self, gift_name: str) -> Optional[int]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ø–æ–¥–∞—Ä—É–Ω–∫–∞ –∑–∞ –Ω–∞–∑–≤–æ—é
        """
        for gift_id, gift_info in GIFT_MAPPING.items():
            if gift_info["name"] == gift_name:
                return gift_id
        return None
    
    def _get_gift_image_url(self, gift_id: int) -> str:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞
        """
        # –ë–∞–∑–æ–≤—ñ URL –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
        base_urls = {
            1: "https://i.postimg.cc/jdsL20Gt/Gifts-Gifts-Gifts-Ag-ADBmg-AAnz-Oe-Ek.png",
            2: "https://i.postimg.cc/XqDSnCRZ/Gifts-Gifts-Gifts-Ag-ADWWg-AAhwgi-Uk.png",
            3: "https://i.postimg.cc/rmnY4LQ3/Gifts-Gifts-Gifts-Ag-ADCWc-AAk-LAe-Uk.png",
            4: "https://i.postimg.cc/bwxCTnmQ/Gifts-Gifts-Gifts-Ag-ADKmk-AAt0-L2-Ek.png",
            5: "https://i.postimg.cc/K4Xf7cLq/Gifts-Gifts-Gifts-Ag-ADB3-UAAp5-V0-Uk.png",
            6: "https://i.postimg.cc/hjfNpjzc/Gifts-Gifts-Gifts-Ag-ADj-Gw-AAkl0c-Eo.png",
            7: "https://i.postimg.cc/TY8BJTRv/Gifts-Gifts-Gifts-Ag-ADk3-AAAiy-WGEs.png",
            8: "https://i.postimg.cc/gkqtyRS3/Gifts-Gifts-Gifts-Ag-ADB3-AAAr-Pqc-Eo.png",
            9: "https://i.postimg.cc/d1y4hTZk/Gifts-Gifts-Gifts-Ag-ADh2o-AAoa-Dc-Eo.png",
            10: "https://i.postimg.cc/3NZjGj8R/Gifts-Gifts-Gifts-Ag-ADhmw-AAl1-Zc-Uo.png",
            11: "https://i.postimg.cc/Dfc1Bghf/Gifts-Gifts-Gifts-Ag-ADe-WMAAp-Rw-IUs.png",
            12: "https://i.postimg.cc/NfJmwjLW/Gifts-Gifts-Gifts-Ag-ADf-GYAAjfaw-Uo.png",
            13: "https://i.postimg.cc/hGFJSzn3/Gifts-Gifts-Gifts-Ag-AD-HEAAq-9c-Us.png",
            14: "https://i.postimg.cc/pr1T3ykC/Gifts-Gifts-Gifts-Ag-ADV3-MAAnv-We-Us.png",
            15: "https://i.postimg.cc/k5F5qTfB/Gifts-Gifts-Gifts-Ag-AD4-GQAAq8-Xg-Us.png",
            16: "https://i.postimg.cc/05HykMdd/Gifts-Gifts-Gifts-Ag-AD82w-AAk-FZg-Es.png",
            17: "https://i.postimg.cc/bN7Yn75Z/Gifts-Gifts-Gifts-Ag-AEZAACV66-BSw.png",
            18: "https://i.postimg.cc/c1jdyq0F/Gifts-Gifts-Gifts-Ag-ADg2o-AAg-R5g-Us.png",
            19: "https://i.postimg.cc/nhfZrvs7/Gifts-Gifts-Gifts-Ag-ADIo-UAAk3-J2-Es.png",
            20: "https://i.postimg.cc/tTJGwkf0/Gifts-Gifts-Gifts-Ag-ADBa-UAAk8-WKEg.png",
            21: "https://i.postimg.cc/WtLRDv4j/Gifts-Gifts-Gifts-Ag-ADh-HUAAg-O6-IUg.png",
            22: "https://i.postimg.cc/gJxk8GG6/Gifts-Gifts-Gifts-Ag-ADMm4-AAj-Ll6-Ug.png",
            23: "https://i.postimg.cc/N0zQgZRG/Gifts-Gifts-Gifts-Ag-ADO3c-AAqb-DEEk.png",
            24: "https://i.postimg.cc/QxJsBFcy/Gifts-Gifts-Gifts-Ag-ADa3-QAAtw-JEEk.png",
            25: "https://i.postimg.cc/3Nr1nfbp/Gifts-Gifts-Gifts-Ag-ADbn-UAAl-XNEUk.png",
            26: "https://i.postimg.cc/ydjXgXYN/Gifts-Gifts-Gifts-Ag-AD0-Ww-AAs4-T4-Ek.png",
            27: "https://i.postimg.cc/L4y3mTbC/Gifts-Gifts-Gifts-Ag-ADy-XEAAky04-Ek.png",
            28: "https://i.postimg.cc/85pLSJBg/Gifts-Gifts-Gifts-Ag-ADKX4-AAuw-O2-Ek.png",
            29: "https://i.postimg.cc/BQrDvwcg/Gifts-Gifts-Gifts-Ag-ADD3-IAAm-RNKUo.png",
            30: "https://i.postimg.cc/0QXK1ty7/Gifts-Gifts-Gifts-Ag-ADzn-IAAl-Gn-QEs.png",
            31: "https://i.postimg.cc/V6hvVdKR/Gifts-Gifts-Gifts-Ag-ADi-IYAAqf-LQEs.png",
            32: "https://i.postimg.cc/wv1LMKPw/Gifts-Gifts-Gifts-Ag-AD2-XQAAk-VPSEs.png",
            33: "https://i.postimg.cc/GtkBTbjx/Gifts-Gifts-Gifts-Ag-ADV4-QAAiibe-Us.png",
            34: "https://i.postimg.cc/7Y96Fsth/Gifts-Gifts-Gifts-Ag-ADNWw-AAg5ze-Es.png",
            35: "https://i.postimg.cc/FKMsy2zW/Gifts-Gifts-Gifts-Ag-ADi38-AAg-7c-Es.png",
            36: "https://i.postimg.cc/d1cwkrNg/Gifts-Gifts-Gifts-Ag-AD5-XMAAmjze-Us.png",
            37: "https://i.postimg.cc/vmG9dxbL/Gifts-Gifts-Gifts-Ag-ADdn-MAAj-Jye-Es.png"
        }
        
        return base_urls.get(gift_id, "")
    
    def _generate_demo_gifts(self, channel_id: int) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ–º–æ-–ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –¥–ª—è –∫–∞–Ω–∞–ª—É
        """
        import random
        
        # –ë–∞–∑–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–∞–Ω–∞–ª—ñ–≤
        demo_templates = {
            "fashion": [1, 4, 36, 2, 25, 7],  # Fashion Style
            "animals": [3, 17, 21, 1, 24, 30],  # Cat Lovers
            "tech": [6, 10, 19, 2, 27, 18],  # Tech Store
            "food": [8, 15, 26, 3, 20, 16],  # Sweet Treats
            "entertainment": [37, 33, 34, 36, 35, 32],  # Hip Hop
            "misc": [2, 6, 5, 22, 12, 9]  # Button Collectors
        }
        
        # –í–∏–±–∏—Ä–∞—î–º–æ —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ channel_id
        template_keys = list(demo_templates.keys())
        template_key = template_keys[abs(channel_id) % len(template_keys)]
        gift_ids = demo_templates[template_key]
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∏
        gifts = []
        for gift_id in gift_ids:
            gift_info = GIFT_MAPPING.get(gift_id)
            if gift_info:
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                count = random.randint(50, 3000)
                
                gifts.append({
                    "id": gift_id,
                    "name": gift_info["name"],
                    "count": count,
                    "image_url": self._get_gift_image_url(gift_id)
                })
        
        return gifts
    
    async def refresh_channel_gifts(self, channel_id: int) -> List[Dict[str, Any]]:
        """
        –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∫–∞–Ω–∞–ª—É
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
            gifts = await self.parse_channel_gifts(channel_id)
            
            logger.info(f"Refreshed {len(gifts)} gifts for channel {channel_id}")
            return gifts
            
        except Exception as e:
            logger.error(f"Failed to refresh gifts for channel {channel_id}: {e}")
            return []
    
    def analyze_gift_trends(self, channels_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
        """
        try:
            gift_stats = {}
            total_channels = len(channels_data)
            
            for channel_data in channels_data:
                gifts = channel_data.get("gifts", [])
                
                for gift in gifts:
                    gift_id = gift["id"]
                    gift_name = gift["name"]
                    count = gift["count"]
                    
                    if gift_id not in gift_stats:
                        gift_stats[gift_id] = {
                            "name": gift_name,
                            "total_count": 0,
                            "channels_count": 0,
                            "avg_count_per_channel": 0
                        }
                    
                    gift_stats[gift_id]["total_count"] += count
                    gift_stats[gift_id]["channels_count"] += 1
            
            # –†–∞—Ö—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            for gift_id, stats in gift_stats.items():
                if stats["channels_count"] > 0:
                    stats["avg_count_per_channel"] = stats["total_count"] / stats["channels_count"]
                    stats["popularity"] = (stats["channels_count"] / total_channels) * 100
            
            return {
                "total_channels_analyzed": total_channels,
                "unique_gifts_found": len(gift_stats),
                "gift_statistics": gift_stats,
                "most_popular_gifts": sorted(
                    gift_stats.items(),
                    key=lambda x: x[1]["popularity"],
                    reverse=True
                )[:10],
                "rarest_gifts": sorted(
                    gift_stats.items(),
                    key=lambda x: x[1]["channels_count"]
                )[:10]
            }
            
        except Exception as e:
            logger.error(f"Failed to analyze gift trends: {e}")
            return {}
