"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª FastAPI –¥–ª—è GiftRoom Marketplace
"""
import os
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
import asyncio
import threading

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫–∞
from app.config import settings
from app.database import startup_database, close_db, database_manager
from app.api import auth, channels, gifts, transactions, referrals, wallet

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, settings.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Telegram Bot
from bot.handlers import setup_bot, start_bot_webhook, stop_bot


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –¥–æ–¥–∞—Ç–∫–∞
    """
    # Startup
    logger.info("üöÄ Starting GiftRoom Marketplace...")
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await startup_database()
        logger.info("‚úÖ Database initialized")
        
        # –ó–∞–ø—É—Å–∫ Telegram Bot
        await setup_bot()
        logger.info("‚úÖ Telegram Bot initialized")
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á
        asyncio.create_task(periodic_tasks())
        logger.info("‚úÖ Periodic tasks started")
        
    except Exception as e:
        logger.error(f"‚ùå Startup failed: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down GiftRoom Marketplace...")
    
    try:
        await stop_bot()
        await close_db()
        logger.info("‚úÖ Graceful shutdown completed")
    except Exception as e:
        logger.error(f"‚ùå Shutdown error: {e}")


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞
app = FastAPI(
    title=settings.app_name,
    description="–ë–µ–∑–ø–µ—á–Ω–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂—É Telegram –∫–∞–Ω–∞–ª—ñ–≤ –∑ –ø–æ–¥–∞—Ä—É–Ω–∫–∞–º–∏",
    version=settings.app_version,
    lifespan=lifespan,
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None,
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if settings.is_production:
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["*.onrender.com", "giftroom-marketplace.onrender.com"]
    )

# –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
if os.path.exists("frontend/static"):
    app.mount("/static", StaticFiles(directory="frontend/static"), name="static")

# API —Ä–æ—É—Ç–∏
app.include_router(auth.router, prefix="/api/v1/auth", tags=["–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è"])
app.include_router(channels.router, prefix="/api/v1/channels", tags=["–ö–∞–Ω–∞–ª–∏"])
app.include_router(gifts.router, prefix="/api/v1/gifts", tags=["–ü–æ–¥–∞—Ä—É–Ω–∫–∏"])
app.include_router(transactions.router, prefix="/api/v1/transactions", tags=["–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"])
app.include_router(referrals.router, prefix="/api/v1/referrals", tags=["–†–µ—Ñ–µ—Ä–∞–ª–∏"])
app.include_router(wallet.router, prefix="/api/v1/wallet", tags=["–ì–∞–º–∞–Ω–µ—Ü—å"])


# –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ—É—Ç–∏
@app.get("/", response_class=HTMLResponse)
async def root():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - Telegram Mini App
    """
    try:
        # –ß–∏—Ç–∞—î–º–æ HTML —Ñ–∞–π–ª
        html_path = os.path.join("frontend", "index.html")
        if os.path.exists(html_path):
            with open(html_path, "r", encoding="utf-8") as f:
                content = f.read()
            # –ó–∞–º—ñ–Ω—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ –≤ HTML
            content = content.replace("{{WEBAPP_URL}}", settings.webapp_url)
            return HTMLResponse(content=content)
        else:
            # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤–∏–π HTML
            return HTMLResponse(content=get_fallback_html())
    except Exception as e:
        logger.error(f"Error serving index.html: {e}")
        return HTMLResponse(content=get_fallback_html())


@app.get("/health")
async def health_check():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        db_healthy = await database_manager.health_check()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–æ—Ç–∞ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        # bot_healthy = await bot_health_check()
        
        return JSONResponse(
            content={
                "status": "healthy" if db_healthy else "unhealthy",
                "version": settings.app_version,
                "database": "ok" if db_healthy else "error",
                "environment": settings.environment
            },
            status_code=200 if db_healthy else 503
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            content={"status": "error", "message": str(e)},
            status_code=503
        )


@app.get("/info")
async def app_info():
    """
    –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–¥–∞—Ç–æ–∫
    """
    try:
        db_info = await database_manager.get_db_info()
        
        return {
            "app_name": settings.app_name,
            "version": settings.app_version,
            "environment": settings.environment,
            "debug": settings.debug,
            "database": db_info,
            "features": {
                "ton_integration": True,
                "referral_system": True,
                "escrow_system": True,
                "telegram_bot": True
            }
        }
    except Exception as e:
        logger.error(f"Failed to get app info: {e}")
        return {"error": str(e)}


@app.post("/webhook/bot")
async def bot_webhook(request: Request):
    """
    Webhook –¥–ª—è Telegram Bot
    """
    try:
        from bot.handlers import handle_webhook
        
        data = await request.json()
        await handle_webhook(data)
        
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Bot webhook error: {e}")
        raise HTTPException(status_code=500, detail="Webhook processing failed")


# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """
    –û–±—Ä–æ–±–∫–∞ 404 –ø–æ–º–∏–ª–æ–∫
    """
    return JSONResponse(
        status_code=404,
        content={"message": "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", "path": request.url.path}
    )


@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: HTTPException):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ–º–∏–ª–æ–∫
    """
    logger.error(f"Internal server error: {exc}")
    return JSONResponse(
        status_code=500,
        content={"message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    )


# –ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –∑–∞–¥–∞—á—ñ
async def periodic_tasks():
    """
    –ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –∑–∞–¥–∞—á—ñ —Å–∏—Å—Ç–µ–º–∏
    """
    while True:
        try:
            # –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            await database_manager.cleanup_expired_transactions()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
            # await update_gift_statistics()
            
            await asyncio.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω
            
        except Exception as e:
            logger.error(f"Periodic task error: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —á–µ–∫–∞—î–º–æ 1 —Ö–≤–∏–ª–∏–Ω—É


def get_fallback_html() -> str:
    """
    –†–µ–∑–µ—Ä–≤–Ω–∏–π HTML —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    """
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>GiftRoom Market</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                margin: 0;
                padding: 20px;
                background: #0F0F19;
                color: white;
                text-align: center;
            }
            .container {
                max-width: 400px;
                margin: 50px auto;
                padding: 30px;
                background: #2a2a3e;
                border-radius: 20px;
            }
            h1 {
                color: #3d5afe;
                margin-bottom: 20px;
            }
            .status {
                background: #4CAF50;
                color: white;
                padding: 10px 20px;
                border-radius: 25px;
                display: inline-block;
                margin: 20px 0;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéÅ GiftRoom Market</h1>
            <div class="status">–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î</div>
            <p>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å Telegram –∫–∞–Ω–∞–ª—ñ–≤ –∑ –ø–æ–¥–∞—Ä—É–Ω–∫–∞–º–∏</p>
            <p>–í–µ—Ä—Å—ñ—è: """ + settings.app_version + """</p>
            <p>–°–µ—Ä–µ–¥–æ–≤–∏—â–µ: """ + settings.environment + """</p>
        </div>
    </body>
    </html>
    """


# –Ø–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–ø—Ä—è–º—É
if __name__ == "__main__":
    import uvicorn
    
    port = int(os.getenv("PORT", 8000))
    
    logger.info(f"üéÅ Starting GiftRoom Marketplace on port {port}")
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )
