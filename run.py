#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É GiftRoom Marketplace
"""
import asyncio
import os
import sys
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É –≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app.config import settings
from app.database import test_connection, startup_database
from app.main import app

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, settings.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    logger.info("üîç Checking environment...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    required_vars = ['BOT_TOKEN', 'DATABASE_URL', 'SECRET_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not getattr(settings, var.lower(), None):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"‚ùå Missing environment variables: {', '.join(missing_vars)}")
        logger.error("Please check your .env file")
        return False
    
    logger.info("‚úÖ Environment variables OK")
    return True


async def check_database():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    logger.info("üîç Checking database connection...")
    
    try:
        success = await test_connection()
        if success:
            logger.info("‚úÖ Database connection OK")
            return True
        else:
            logger.error("‚ùå Database connection failed")
            return False
    except Exception as e:
        logger.error(f"‚ùå Database error: {e}")
        return False


async def run_migrations():
    """–ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ–π"""
    logger.info("üîÑ Running database migrations...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Alembic –º—ñ–≥—Ä–∞—Ü—ñ—ó
        import subprocess
        result = subprocess.run(
            ['alembic', 'upgrade', 'head'],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Database migrations completed")
            return True
        else:
            logger.error(f"‚ùå Migration failed: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Migration error: {e}")
        return False


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("üöÄ Starting GiftRoom Marketplace...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if not await check_environment():
        sys.exit(1)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if not await check_database():
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ–π
    if settings.is_development:
        if not await run_migrations():
            logger.warning("‚ö†Ô∏è  Migration failed, but continuing...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        await startup_database()
        logger.info("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    import uvicorn
    
    port = int(os.getenv("PORT", 8000))
    host = "0.0.0.0"
    
    logger.info(f"üåê Starting server on {host}:{port}")
    logger.info(f"üì± Telegram Bot: @{settings.bot_token.split(':')[0]}")
    logger.info(f"üåç Web App URL: {settings.webapp_url}")
    logger.info(f"üìä Environment: {settings.environment}")
    
    try:
        config = uvicorn.Config(
            app,
            host=host,
            port=port,
            log_level=settings.log_level.lower(),
            reload=settings.debug,
            access_log=True
        )
        server = uvicorn.Server(config)
        await server.serve()
        
    except KeyboardInterrupt:
        logger.info("üõë Server stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Server error: {e}")
        sys.exit(1)


def run_development():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏"""
    logger.info("üîß Starting in development mode...")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
    os.environ['DEBUG'] = 'True'
    os.environ['ENVIRONMENT'] = 'development'
    
    # –ó–∞–ø—É—Å–∫ –∑ reload
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        reload=True,
        reload_dirs=["app", "bot", "services"],
        log_level="info"
    )


def run_production():
    """–ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ"""
    logger.info("üöÄ Starting in production mode...")
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Application stopped")
    except Exception as e:
        logger.error(f"‚ùå Application error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "dev":
            run_development()
        elif command == "prod":
            run_production()
        elif command == "check":
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            asyncio.run(check_environment())
            asyncio.run(check_database())
        elif command == "migrate":
            # –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ–π
            asyncio.run(run_migrations())
        else:
            print("Usage: python run.py [dev|prod|check|migrate]")
            sys.exit(1)
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ
        run_production()
