import asyncio
import threading
import os
from fastapi import FastAPI
from fastapi.responses import HTMLResponse
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import uvicorn

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = "7878078707:AAEnd1_7b5JFw9hsEX71DKWbPiJNyW4xB2k"
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://telegram-miniapp-cmol.onrender.com")  # –ó–ú–Ü–ù–Ü–¢–¨ –ù–ê –°–í–Ü–ô –î–û–ú–ï–ù

app = FastAPI()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@app.get("/", response_class=HTMLResponse)
async def miniapp():
    return """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ –ú—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–æ–∫</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            padding: 20px;
        }
        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 400px;
            width: 100%;
            animation: fadeIn 0.6s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .logo {
            font-size: 64px;
            margin-bottom: 20px;
            animation: bounce 2s infinite;
        }
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }
        h1 {
            color: #333;
            font-size: 28px;
            margin-bottom: 10px;
            font-weight: 700;
        }
        .subtitle {
            color: #666;
            font-size: 16px;
            margin-bottom: 30px;
        }
        .status {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            padding: 15px 25px;
            border-radius: 50px;
            font-size: 18px;
            font-weight: 600;
            margin: 20px 0;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }
        .button {
            background: linear-gradient(45deg, #2196F3, #21CBF3);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
        }
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(33, 150, 243, 0.4);
        }
        .button:active {
            transform: translateY(0);
        }
        .success {
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
            color: white;
            padding: 15px;
            border-radius: 15px;
            font-weight: 600;
            margin-top: 20px;
            animation: slideIn 0.5s ease-out;
        }
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }
        .footer {
            margin-top: 30px;
            color: #888;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üöÄ</div>
        <h1>–ú—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–æ–∫</h1>
        <div class="subtitle">Telegram Web App</div>
        
        <div class="status">‚ú® –í—Å–µ –ø—Ä–∞—Ü—é—î –≤—ñ–¥–º—ñ–Ω–Ω–æ!</div>
        
        <button class="button" onclick="showMessage()">üéØ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏</button>
        <button class="button" onclick="closeApp()">‚ùå –ó–∞–∫—Ä–∏—Ç–∏</button>
        
        <div id="result"></div>
        
        <div class="footer">
            –ü—Ä–∞—Ü—é—î –Ω–∞ FastAPI + Aiogram
        </div>
    </div>

    <script>
        let tg = window.Telegram.WebApp;
        tg.expand();
        
        function showMessage() {
            document.getElementById('result').innerHTML = 
                '<div class="success">üéâ –ú—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ!</div>';
            tg.showAlert('–í—Å–µ –ø—Ä–∞—Ü—é—î!');
        }
        
        function closeApp() {
            tg.close();
        }
        
        // –ì–æ–ª–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞
        tg.MainButton.text = "‚úÖ –ì–æ—Ç–æ–≤–æ";
        tg.MainButton.show();
        tg.MainButton.onClick(() => { tg.close(); });
        
        // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–æ —Ç–µ–º–∏
        if (tg.colorScheme === 'dark') {
            document.body.style.background = 'linear-gradient(135deg, #2c3e50 0%, #34495e 100%)';
        }
    </script>
</body>
</html>
    """

@app.get("/api/status")
async def get_status():
    return {
        "status": "online",
        "app": "Telegram MiniApp",
        "version": "1.0.0"
    }

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="üöÄ –í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )
        ]]
    )
    
    await message.answer(
        f"üéâ –ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}!\n\n"
        f"–¶–µ –º—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–æ–∫ –≤ Telegram!\n"
        f"–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏:",
        reply_markup=keyboard
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –í—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–æ–∫\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É\n"
        "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å"
    )

@dp.message(Command("status"))
async def status_command(message: types.Message):
    await message.answer(
        "‚úÖ –ú—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î!\n"
        f"üåê URL: {WEBAPP_URL}\n"
        "ü§ñ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω!"
    )

async def run_bot():
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await dp.start_polling(bot)

def start_bot():
    asyncio.run(run_bot())

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –º—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–∫–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    print("=" * 50)
    print("‚úÖ –ú–Ü–ù–Ü-–î–û–î–ê–¢–û–ö –ì–û–¢–û–í–ò–ô!")
    print("=" * 50)
    print(f"üåê URL: {WEBAPP_URL}")
    print(f"üì± –ü–æ—Ä—Ç: {port}")
    print("ü§ñ Telegram –±–æ—Ç –ø—Ä–∞—Ü—é—î!")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    uvicorn.run(app, host="0.0.0.0", port=port)
