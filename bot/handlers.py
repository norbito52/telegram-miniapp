"""
Telegram Bot –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è GiftRoom Marketplace
"""
import asyncio
import logging
from typing import Dict, Any, Optional
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, MenuButtonWebApp, BotCommand
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.config import settings
from app.database import AsyncSessionLocal
from app.models import User, Channel, Transaction
from app.config import TransactionStatus
from services.telegram_service import TelegramService
from services.notification_service import NotificationService

logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher()
router = Router()

# –°–µ—Ä–≤—ñ—Å–∏
telegram_service = TelegramService()
notification_service = NotificationService()

# –¢–µ–∫—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGES = {
    "welcome": """
üéÅ <b>–í—ñ—Ç–∞—î–º–æ –≤ GiftRoom Market!</b>

–ë–µ–∑–ø–µ—á–Ω–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ-–ø—Ä–æ–¥–∞–∂—É Telegram –∫–∞–Ω–∞–ª—ñ–≤ –∑ –ø–æ–¥–∞—Ä—É–Ω–∫–∞–º–∏.

üîí <b>–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:</b>
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –µ—Å–∫—Ä–æ—É –Ω–∞ TON –±–ª–æ–∫—á–µ–π–Ω—ñ
‚Ä¢ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤
‚Ä¢ –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–∫–∞–º—É
‚Ä¢ –ö–æ–º—ñ—Å—ñ—è –≤—Å—å–æ–≥–æ 5%

üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:</b>
–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —ñ –æ—Ç—Ä–∏–º—É–π—Ç–µ 2.5% –∑ –∫–æ–∂–Ω–æ—ó —É–≥–æ–¥–∏!

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ üëá
""",
    
    "help": """
üÜò <b>–î–æ–≤—ñ–¥–∫–∞ GiftRoom Market</b>

<b>–î–ª—è –ø–æ–∫—É–ø—Ü—ñ–≤:</b>
1. –û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –∑ –ø–æ–¥–∞—Ä—É–Ω–∫–∞–º–∏
2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ö—É–ø–∏—Ç–∏"
3. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É –≤ TON
4. –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª

<b>–î–ª—è –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤:</b>
1. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω–∞ –∫–∞–Ω–∞–ª—É
2. –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ —Ü—ñ–Ω–æ—é
3. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –ø–æ–∫—É–ø—Ü—è
4. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –∫–æ—à—Ç–∏

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/profile - –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å
/channels - –í–∞—à—ñ –∫–∞–Ω–∞–ª–∏
/support - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞
""",
    
    "profile": """
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>

üÜî ID: {user_id}
üì± Telegram: {username}
üí∞ –ë–∞–ª–∞–Ω—Å: {balance} TON

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ö—É–ø–ª–µ–Ω–æ –∫–∞–Ω–∞–ª—ñ–≤: {bought}
‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ –∫–∞–Ω–∞–ª—ñ–≤: {sold}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±–æ—Ä–æ—Ç: {volume} TON

üéØ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:</b>
‚Ä¢ –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {referrals}
‚Ä¢ –ó–∞—Ä–æ–±–æ–∫: {earnings} TON
‚Ä¢ –í–∞—à –∫–æ–¥: <code>{referral_code}</code>
""",
    
    "no_channels": """
üìù <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤</b>

–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:
1. –ó—Ä–æ–±—ñ—Ç—å –±–æ—Ç–∞ –∞–¥–º—ñ–Ω–æ–º –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É
2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ marketplace —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ
3. –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ —Ü—ñ–Ω–æ—é

üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ö–∞–Ω–∞–ª–∏ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–∞–º–∏ –ø—Ä–æ–¥–∞—é—Ç—å—Å—è —à–≤–∏–¥—à–µ!
""",
    
    "transaction_created": """
üîÑ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>

üìã <b>–î–µ—Ç–∞–ª—ñ:</b>
‚Ä¢ –ö–∞–Ω–∞–ª: {channel_name}
‚Ä¢ –°—É–º–∞: {amount} TON
‚Ä¢ –ö–æ–º—ñ—Å—ñ—è: {commission} TON
‚Ä¢ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏

‚è∞ <b>–ß–∞—Å –Ω–∞ –æ–ø–ª–∞—Ç—É: 60 —Ö–≤–∏–ª–∏–Ω</b>

–ü–æ–∫—É–ø–µ—Ü—å –º–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ –¥–æ–¥–∞—Ç–∫—É.
""",
    
    "transaction_paid": """
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!</b>

–£ –≤–∞—Å —î 60 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø—Ä–∞–≤ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–∫—É–ø—Ü—é.

üìã <b>–©–æ —Ä–æ–±–∏—Ç–∏:</b>
1. –ó–∞–π–¥—ñ—Ç—å –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É
2. –í–∏–¥–∞–ª—ñ—Ç—å —Å–µ–±–µ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
3. –î–æ–¥–∞–π—Ç–µ –ø–æ–∫—É–ø—Ü—è —è–∫ –≤–ª–∞—Å–Ω–∏–∫–∞
4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –≤ –¥–æ–¥–∞—Ç–∫—É

‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –Ø–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—Å—Ç–µ –ø—Ä–∞–≤–∞ –≤—á–∞—Å–Ω–æ, –∫–æ—à—Ç–∏ –±—É–¥—É—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –ø–æ–∫—É–ø—Ü—é.
""",
    
    "transaction_completed": """
üéâ <b>–£–≥–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–ö–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–∫—É–ø—Ü—é.
–ö–æ—à—Ç–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.

üí∞ <b>–û—Ç—Ä–∏–º–∞–Ω–æ:</b>
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞ —Å—É–º–∞: {seller_amount} TON
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: {referral} TON

–î—è–∫—É—î–º–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è GiftRoom Market!
""",
    
    "transaction_cancelled": """
‚ùå <b>–£–≥–æ–¥–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞</b>

–ü—Ä–∏—á–∏–Ω–∞: {reason}

üí∞ –ö–æ—à—Ç–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –ø–æ–∫—É–ø—Ü—é.
üìù –ö–∞–Ω–∞–ª –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂—É.
""",
    
    "support": """
üÜò <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞</b>

–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º–∏:

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b>
‚Ä¢ Telegram: @support_giftroom
‚Ä¢ Email: support@giftroom.market

üïê <b>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</b>
–¶—ñ–ª–æ–¥–æ–±–æ–≤–æ, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º 1-2 –≥–æ–¥–∏–Ω

‚ùì <b>–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:</b>
‚Ä¢ –Ø–∫ —Å—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω–æ–º –∫–∞–Ω–∞–ª—É?
‚Ä¢ –©–æ —Ä–æ–±–∏—Ç–∏ —è–∫—â–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–∞–≤–∏—Å–ª–∞?
‚Ä¢ –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É?

–í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —î –≤ –Ω–∞—à—ñ–π –±–∞–∑—ñ –∑–Ω–∞–Ω—å –≤ –¥–æ–¥–∞—Ç–∫—É.
"""
}


# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞"""
    webapp = WebAppInfo(url=settings.webapp_url)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text="üéÅ –í—ñ–¥–∫—Ä–∏—Ç–∏ Marketplace",
            web_app=webapp
        )
    )
    keyboard.add(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"),
        InlineKeyboardButton(text="üìã –ú–æ—ó –∫–∞–Ω–∞–ª–∏", callback_data="my_channels")
    )
    keyboard.add(
        InlineKeyboardButton(text="üÜò –î–æ–ø–æ–º–æ–≥–∞", callback_data="help"),
        InlineKeyboardButton(text="üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")
    )
    keyboard.adjust(1, 2, 2)
    
    return keyboard.as_markup()


def get_profile_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ—ñ–ª—é"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞", callback_data="referrals"),
        InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", callback_data="top_up")
    )
    keyboard.add(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    keyboard.adjust(2, 1)
    
    return keyboard.as_markup()


def get_channels_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª—ñ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="create_channel"),
        InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–∏", callback_data="refresh_gifts")
    )
    keyboard.add(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    keyboard.adjust(2, 1)
    
    return keyboard.as_markup()


def get_transaction_keyboard(transaction_id: int, is_seller: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    keyboard = InlineKeyboardBuilder()
    
    if is_seller:
        keyboard.add(
            InlineKeyboardButton(
                text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–µ—Ä–µ–¥–∞—á—É",
                callback_data=f"confirm_transfer_{transaction_id}"
            )
        )
    else:
        keyboard.add(
            InlineKeyboardButton(
                text="üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏",
                callback_data=f"pay_transaction_{transaction_id}"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton(
            text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
            callback_data=f"cancel_transaction_{transaction_id}"
        )
    )
    keyboard.adjust(1, 1)
    
    return keyboard.as_markup()


# –£—Ç–∏–ª—ñ—Ç–∏
async def get_db() -> AsyncSession:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –ë–î"""
    async with AsyncSessionLocal() as session:
        yield session


async def get_or_create_user(user_data: Dict[str, Any]) -> User:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async with AsyncSessionLocal() as db:
        # –ü–æ—à—É–∫ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        result = await db.execute(
            select(User).where(User.telegram_id == user_data['id'])
        )
        user = result.scalar_one_or_none()
        
        if not user:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = User(
                telegram_id=user_data['id'],
                username=user_data.get('username'),
                first_name=user_data.get('first_name'),
                last_name=user_data.get('last_name'),
                referral_code=f"ref_{user_data['id']}"
            )
            db.add(user)
            await db.commit()
            await db.refresh(user)
            
            logger.info(f"New user created: {user.telegram_id}")
        
        return user


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await get_or_create_user(message.from_user.model_dump())
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
        if message.text and len(message.text.split()) > 1:
            referral_code = message.text.split()[1]
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
            await process_referral_code(user, referral_code)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        webapp = WebAppInfo(url=settings.webapp_url)
        menu_button = MenuButtonWebApp(text="üéÅ GiftRoom", web_app=webapp)
        await bot.set_chat_menu_button(
            chat_id=message.chat.id,
            menu_button=menu_button
        )
        
        await message.answer(
            MESSAGES["welcome"],
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await message.answer(
        MESSAGES["help"],
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@router.message(Command("profile"))
async def profile_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    try:
        user = await get_or_create_user(message.from_user.model_dump())
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –ë–î
        stats = {
            "user_id": user.id,
            "username": user.display_name,
            "balance": user.balance,
            "bought": user.total_bought,
            "sold": user.total_sold,
            "volume": user.total_volume,
            "referrals": 0,  # TODO: –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑ –ë–î
            "earnings": 0,   # TODO: –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑ –ë–î
            "referral_code": user.referral_code
        }
        
        await message.answer(
            MESSAGES["profile"].format(**stats),
            parse_mode="HTML",
            reply_markup=get_profile_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in profile command: {e}")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å.")


@router.message(Command("channels"))
async def channels_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /channels"""
    try:
        user = await get_or_create_user(message.from_user.model_dump())
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        async with AsyncSessionLocal() as db:
            result = await db.execute(
                select(Channel).where(Channel.owner_id == user.id)
            )
            channels = result.scalars().all()
        
        if not channels:
            await message.answer(
                MESSAGES["no_channels"],
                parse_mode="HTML",
                reply_markup=get_channels_keyboard()
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
        channels_text = "üìã <b>–í–∞—à—ñ –∫–∞–Ω–∞–ª–∏:</b>\n\n"
        for channel in channels:
            channels_text += f"‚Ä¢ {channel.display_name}\n"
            channels_text += f"  üí∞ {channel.price} TON\n"
            channels_text += f"  üìä {channel.status}\n\n"
        
        await message.answer(
            channels_text,
            parse_mode="HTML",
            reply_markup=get_channels_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in channels command: {e}")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞–Ω–∞–ª–∏.")


# –û–±—Ä–æ–±–Ω–∏–∫–∏ callback'—ñ–≤
@router.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery):
    """Callback –ø—Ä–æ—Ñ—ñ–ª—é"""
    await callback.message.edit_text(
        MESSAGES["profile"],
        parse_mode="HTML",
        reply_markup=get_profile_keyboard()
    )


@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """Callback –¥–æ–ø–æ–º–æ–≥–∏"""
    await callback.message.edit_text(
        MESSAGES["help"],
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data == "support")
async def support_callback(callback: CallbackQuery):
    """Callback –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"""
    await callback.message.edit_text(
        MESSAGES["support"],
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    """Callback –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        MESSAGES["welcome"],
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data.startswith("pay_transaction_"))
async def pay_transaction_callback(callback: CallbackQuery):
    """Callback –æ–ø–ª–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        transaction_id = int(callback.data.split("_")[2])
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        async with AsyncSessionLocal() as db:
            result = await db.execute(
                select(Transaction).where(Transaction.id == transaction_id)
            )
            transaction = result.scalar_one_or_none()
        
        if not transaction:
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
        if transaction.status != TransactionStatus.PENDING:
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞", show_alert=True)
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ webapp
        webapp_url = f"{settings.webapp_url}/pay/{transaction_id}"
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(
                text="üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ TON",
                web_app=WebAppInfo(url=webapp_url)
            )
        )
        
        await callback.message.edit_text(
            f"üí∞ <b>–û–ø–ª–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó #{transaction_id}</b>\n\n"
            f"–°—É–º–∞: {transaction.amount} TON\n"
            f"–ö–æ–º—ñ—Å—ñ—è: {transaction.commission} TON\n\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ TON Connect",
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in pay transaction callback: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ", show_alert=True)


@router.callback_query(F.data.startswith("confirm_transfer_"))
async def confirm_transfer_callback(callback: CallbackQuery):
    """Callback –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞—á—ñ –∫–∞–Ω–∞–ª—É"""
    try:
        transaction_id = int(callback.data.split("_")[2])
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        async with AsyncSessionLocal() as db:
            result = await db.execute(
                select(Transaction).where(Transaction.id == transaction_id)
            )
            transaction = result.scalar_one_or_none()
        
        if not transaction:
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –ø—Ä–æ–¥–∞–≤—Ü–µ–º
        user = await get_or_create_user(callback.from_user.model_dump())
        if transaction.seller_id != user.id:
            await callback.answer("–í–∏ –Ω–µ —î –ø—Ä–æ–¥–∞–≤—Ü–µ–º —Ü—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
        if transaction.status != TransactionStatus.PENDING:
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–¥–∞—á—É –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ Telegram API
        channel_transferred = await telegram_service.verify_channel_ownership_transfer(
            transaction.channel.telegram_channel_id,
            transaction.buyer_id
        )
        
        if not channel_transferred:
            await callback.answer(
                "–ü—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª —â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –ø–æ–∫—É–ø—Ü—é.",
                show_alert=True
            )
            return
        
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        await complete_transaction(transaction_id)
        
        await callback.message.edit_text(
            "‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "–ö–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–∫—É–ø—Ü—é.\n"
            f"–ö–æ—à—Ç–∏ ({transaction.seller_amount} TON) –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in confirm transfer callback: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ", show_alert=True)


@router.callback_query(F.data.startswith("cancel_transaction_"))
async def cancel_transaction_callback(callback: CallbackQuery):
    """Callback —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        transaction_id = int(callback.data.split("_")[2])
        
        # –°–∫–∞—Å–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        await cancel_transaction(transaction_id, "–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        
        await callback.message.edit_text(
            "‚ùå <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞</b>\n\n"
            "–ö–æ—à—Ç–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –ø–æ–∫—É–ø—Ü—é.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in cancel transaction callback: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ", show_alert=True)


# –ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞
async def process_referral_code(user: User, referral_code: str):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É"""
    try:
        async with AsyncSessionLocal() as db:
            # –®—É–∫–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            result = await db.execute(
                select(User).where(User.referral_code == referral_code)
            )
            referrer = result.scalar_one_or_none()
            
            if referrer and referrer.id != user.id and not user.referred_by:
                user.referred_by = referrer.id
                await db.commit()
                
                logger.info(f"User {user.id} referred by {referrer.id}")
                
                # –°–ø–æ–≤—ñ—â–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                await bot.send_message(
                    referrer.telegram_id,
                    f"üéâ <b>–ù–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.display_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –∑–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.\n"
                    f"–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2.5% –∑ –π–æ–≥–æ —É–≥–æ–¥!",
                    parse_mode="HTML"
                )
                
    except Exception as e:
        logger.error(f"Error processing referral code: {e}")


async def complete_transaction(transaction_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        async with AsyncSessionLocal() as db:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            result = await db.execute(
                select(Transaction).where(Transaction.id == transaction_id)
            )
            transaction = result.scalar_one_or_none()
            
            if not transaction:
                return
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            transaction.status = TransactionStatus.COMPLETED
            transaction.completed_at = func.now()
            
            # –ó–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ—à—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é
            seller_result = await db.execute(
                select(User).where(User.id == transaction.seller_id)
            )
            seller = seller_result.scalar_one()
            seller.balance += transaction.seller_amount
            seller.total_sold += 1
            seller.total_volume += transaction.amount
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø—Ü—è
            buyer_result = await db.execute(
                select(User).where(User.id == transaction.buyer_id)
            )
            buyer = buyer_result.scalar_one()
            buyer.total_bought += 1
            buyer.total_volume += transaction.amount
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É
            channel_result = await db.execute(
                select(Channel).where(Channel.id == transaction.channel_id)
            )
            channel = channel_result.scalar_one()
            channel.status = "sold"
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            if seller.referred_by:
                referral_earning = ReferralEarning(
                    referrer_id=seller.referred_by,
                    referred_id=seller.id,
                    transaction_id=transaction.id,
                    amount=transaction.referral_commission,
                    status="pending"
                )
                db.add(referral_earning)
            
            await db.commit()
            
            # –°–ø–æ–≤—ñ—â–∞—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤
            await notification_service.send_transaction_completed(transaction)
            
            logger.info(f"Transaction {transaction_id} completed")
            
    except Exception as e:
        logger.error(f"Error completing transaction {transaction_id}: {e}")


async def cancel_transaction(transaction_id: int, reason: str):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    try:
        async with AsyncSessionLocal() as db:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            result = await db.execute(
                select(Transaction).where(Transaction.id == transaction_id)
            )
            transaction = result.scalar_one_or_none()
            
            if not transaction:
                return
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            transaction.status = TransactionStatus.CANCELLED
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—à—Ç–∏ –ø–æ–∫—É–ø—Ü—é (—è–∫—â–æ –±—É–ª–∏ —Å–ø–∏—Å–∞–Ω—ñ)
            if transaction.escrow_address:
                # TODO: –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—à—Ç–∏ —á–µ—Ä–µ–∑ TON
                pass
            
            await db.commit()
            
            # –°–ø–æ–≤—ñ—â–∞—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤
            await notification_service.send_transaction_cancelled(transaction, reason)
            
            logger.info(f"Transaction {transaction_id} cancelled: {reason}")
            
    except Exception as e:
        logger.error(f"Error cancelling transaction {transaction_id}: {e}")


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
async def setup_bot():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏
        commands = [
            BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"),
            BotCommand(command="help", description="–î–æ–≤—ñ–¥–∫–∞"),
            BotCommand(command="profile", description="–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"),
            BotCommand(command="channels", description="–ú–æ—ó –∫–∞–Ω–∞–ª–∏"),
            BotCommand(command="support", description="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"),
        ]
        await bot.set_my_commands(commands)
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä
        dp.include_router(router)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ webhook —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if settings.bot_webhook_url:
            await bot.set_webhook(
                url=settings.bot_webhook_url,
                drop_pending_updates=True
            )
            logger.info(f"Bot webhook set to {settings.bot_webhook_url}")
        
        logger.info("Bot setup completed")
        
    except Exception as e:
        logger.error(f"Bot setup failed: {e}")
        raise


async def stop_bot():
    """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
    try:
        await bot.delete_webhook()
        await bot.session.close()
        logger.info("Bot stopped")
    except Exception as e:
        logger.error(f"Bot stop error: {e}")


# Webhook –æ–±—Ä–æ–±–Ω–∏–∫
async def handle_webhook(data: Dict[str, Any]):
    """–û–±—Ä–æ–±–∫–∞ webhook –≤—ñ–¥ Telegram"""
    try:
        await dp.feed_webhook_update(bot, data)
    except Exception as e:
        logger.error(f"Webhook handling error: {e}")


# –î–ª—è –∑–∞–ø—É—Å–∫—É –≤ polling —Ä–µ–∂–∏–º—ñ (—Ä–æ–∑—Ä–æ–±–∫–∞)
async def start_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º—ñ"""
    try:
        await setup_bot()
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"Polling start error: {e}")
        raise


# Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
def create_webhook_app() -> web.Application:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è webhook –¥–æ–¥–∞—Ç–∫–∞"""
    app = web.Application()
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ webhook
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        secret_token=settings.secret_key[:32]  # –ü–µ—Ä—à—ñ 32 —Å–∏–º–≤–æ–ª–∏
    )
    
    webhook_handler.register(app, path="/webhook/bot")
    setup_application(app, dp, bot=bot)
    
    return app


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ polling —Ä–µ–∂–∏–º—ñ
    asyncio.run(start_polling())
